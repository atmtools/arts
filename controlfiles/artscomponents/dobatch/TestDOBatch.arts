# DEFINITIONS:  -*-sh-*-

# This control file handles a DOBatch calculation with
# spectral_radiance_fieldClearskyPlaneParallel
#
# Author: Oliver Lemke
#

Arts2 {


LegacyContinuaInit
water_p_eq_agendaSet
gas_scattering_agendaSet

# Main agenda for DOIT calculation
# ----------------------------------------------------------------------
#
# Input: incoming field on the cloudbox boundary
# Ouput: the scattered field on the cloudbox boundary
AgendaSet( doit_mono_agenda ){
  # Prepare scattering data for DOIT calculation (Optimized method):
  DoitScatteringDataPrepare
  Ignore( f_grid )
  # Alternative method:
  # no optimization of scattering angle grids (needs less memory):
  #scat_data_monoCalc
  # Perform iterations: 1. scattering integral. 2. RT calculations with 
  # fixed scattering integral field, 3. convergence test 
  cloudbox_field_monoIterate
  # Write the radiation field inside the cloudbox:
  # WriteXML( output_file_format, cloudbox_field )
}

# Definitions for methods used in *i_fieldIterate*:
#--------------------------------------------------

# 1. Scattering integral
# ----------------------

# Calculation of the phase matrix
AgendaSet( pha_mat_spt_agenda ){
  # Optimized option:
  pha_mat_sptFromDataDOITOpt
  # Alternative option:
  #pha_mat_sptFromMonoData
}

AgendaSet( doit_scat_field_agenda ){
  doit_scat_fieldCalcLimb
  # Alternative: use the same za grids in RT part and scattering integral part
  #doit_scat_fieldCalc
}


# 2. Radiative transfer with fixed scattering integral term
# ---------------------------------------------------------

AgendaSet( doit_rte_agenda ){
  # Sequential update for 1D
  cloudbox_fieldUpdateSeq1D

  # Alternatives:
  # Plane parallel approximation for determination of propagation path steps:
  #cloudbox_fieldUpdateSeq1DPP

  # Without sequential update (not efficient):
  #cloudbox_fieldUpdate1D

  # 3D atmosphere:
  #cloudbox_fieldUpdateSeq3D

  # Sequential update for 1D with normalizing the scattered field:
  #cloudbox_fieldUpdateSeq1D( normalize=1 )
}

# Calculate opticle properties of particles and add particle absorption
# and extinction to the gaseous properties to get total extinction and
# absorption:

AgendaSet( spt_calc_agenda ){
  opt_prop_sptFromMonoData
}

# 3. Convergence test
# --------------------
AgendaSet( doit_conv_test_agenda ){
  # Give limits for all Stokes components in BT:
  doit_conv_flagAbsBT( #epsilon=[0.1, 0.01, 0.01, 0.01] ) # for stokes dim 4
                       epsilon=[0.1]) # for stokes dim 1

  # Alternative: Give limits in radiances
  #doit_conv_flagAbs( epsilon=[0.1e-15, 0.1e-18, 0.1e-18, 0.1e-18] )
  #
  # If you want to investigate several iteration fields, for example 
  # to investigate the convergence behavior, you can use
  # the following method:
  #DoitWriteIterationFields( iterations=[2, 4])
  #}

}

iy_cloudbox_agendaSet( option="LinInterpField" )
PlanetSet(option="Earth")
#

# 1.General Settings:---------------------------------------------
#----------------------------------------------------------------- 

# cosmic background radiation
iy_space_agendaSet

# standard surface agenda (i.e., make use of surface_rtprop_agenda)
iy_surface_agendaSet

# sensor-only path
ppath_agendaSet( option="FollowSensorLosPath" )

# no refraction
ppath_step_agendaSet( option="GeometricPath" )


# Set out put file format
#------------------------
output_file_formatSetAscii

# Define f_grid
#--------------
VectorSet( f_grid, [9.0e10, 19.0e10])

#Set stokes dim
#--------------
IndexSet (stokes_dim, 1)

#def of atmosphere
#-----------------
IndexSet (atmosphere_dim, 1)

#No jacobian calculations
#-----------------
jacobianOff

# Modifiy the maximum propagation step, from the default(10.e3)
# to 250 m:---------------------------------------------------
NumericSet( ppath_lmax, 250 )

# Surface properties
#-------------------
# Set surface reflectivity (=1-emissivity)
# corresponds to emissivity=0.75
VectorSetConstant( surface_scalar_reflectivity, 1, 0.25 )

surface_rtprop_agendaSet( option="Specular_NoPol_ReflFix_SurfTFromt_surface" )


# 2. Sensor:---------------------------------------------------------
#--------------------------------------------------------------------

# Definition of sensor position and LOS
# ------------------------------------
# Line of sight
MatrixSet( sensor_los,  [131; 179])
# Sensor position
nrowsGet( nrows, sensor_los )
ncolsGet( ncols, sensor_los )
MatrixSetConstant( sensor_pos, nrows, ncols, 850e3 )
# No sensor characteristics are specified
sensorOff


# 3. Read chevallier atmospheric profiles for batch calc--------------
#---------------------------------------------------------------------
ReadXML( batch_atm_fields_compact, "testdata/chevallierl91_all_extract.xml" )

# add constant profiles for O2 and N2
batch_atm_fields_compactAddConstant( name="abs_species-O2", value=0.2095 )
batch_atm_fields_compactAddConstant( name="abs_species-N2", value=0.7808 )


# 4. Absorption-------------------------------------------------
#---------------------------------------------------------------

abs_speciesSet( species=[ "H2O-PWR98",
                          "O3",
                          "O2-PWR93",
                          "N2-SelfContStandardType" ] )

# Creation of abs_lookup table
#-----------------------------
  # ATTENTION: The abs_lookup table used with this test control file was
  #generated by the following code. It is adapted to the specified abs_species,
  #to the specified atmospheric data and frequencies ranging from 80e9 Hz to
  #200e9 Hz. If changes to these inputs are applied the abs_lookup table must
  #be recalculated.

  # Read HITRAN catalog (needed for O3):
  #abs_linesReadFromHitran2004( abs_lines,
  #                             "/storage3/data/catalogue/hitran/hitran2004/HITRAN04.par",
  #                             80e9,
  #                             200e9 )

  #abs_lines_per_speciesCreateFromLines

  #abs_lookupSetupBatch

  #abs_xsec_agenda_checkedCalc
  #abs_lookupCalc

  #WriteXML("ascii", abs_lookup, "abs_lookupBatch.xml")

# Reading of abs_lookup table
#----------------------------
ReadXML( abs_lookup, "abs_lookupBatch.xml" )

# Check if lookup table is fitting input
abs_lookupAdapt

abs_lines_per_speciesSetEmpty
propmat_clearsky_agendaAuto(use_abs_lookup=1)


# 7.AGENDAS--------------------------------------------------------------
#------------------------------------------------------------------------

# Check the include files to see the setting of Agendas and if needed,
# overwrite them by re-setting the agendas here.------------------------


# Sets the angular grids for radiation calculation
# --------------------------------------------------------------------
# For down- and up-looking geometries.
DOAngularGridsSet( doit_za_grid_size, aa_grid, za_grid,
      40, 19, "" )

cloudboxOff

Tensor3Create(trans_field)
# DOBatch Agenda-----------------------------------------------------------
#------------------------------------------------------------------------
AgendaSet( dobatch_calc_agenda ){

  # Extract the atmospheric profiles for current atmosphere:
  Extract(
    atm_fields_compact,
    batch_atm_fields_compact,
    ybatch_index
  )

  # Split up *atm_fields_compact* to
  # generate p_grid, t_field, z_field, massdensity_field, vmr_field
  # Additionally moving TOA down to 10hPa altitude.
  AtmFieldsAndParticleBulkPropFieldFromCompact( p_min=1e3 )

  # Get some surface properties from corresponding atmospheric fields
  Extract( z_surface, z_field, 0 )
  Extract( t_surface, t_field, 0 )

  # Consistency checks
  atmfields_checkedCalc
  atmgeom_checkedCalc
  cloudbox_checkedCalc
  scat_data_checkedCalc
  sensor_checkedCalc

  # Here we choose our *y* output unit
  StringSet( iy_unit, "PlanckBT" )

  # Calculate radiation field
  spectral_radiance_fieldClearskyPlaneParallel(trans_field=trans_field)
  Touch(radiance_field)
  Touch(irradiance_field)
  Touch(spectral_irradiance_field)
}


# Set number of batch cases:
nelemGet( ybatch_n, batch_atm_fields_compact )
#IndexSet(ybatch_start, 0)
# Four cases is enough for this example
IndexSet(ybatch_n, 4)

#===========start batch calc=====================
# Execute the batch calculations:
# This test control file can be run multi-threaded, since it was approved
# that none of the jobs fails.
# If settings are changed, especially if the input atmospheres are altered
# or exchanged, the robust option in *ybatchCalc* should be used.

DOBatchCalc

# Call *DOBatchCalc* robust:
# Set robust flag to 1. If one individual job fails, ARTS will continue
# with the next batch job.
# DOBatchCalc(robust=1)

#WriteXML( "binary", dobatch_cloudbox_field)

# Verify results
ArrayOfTensor7Create( dobatch_ref )
ReadXML( dobatch_ref, "TestDOBatch.dobatch_doit_i_field.ref.xml" )

Compare( dobatch_cloudbox_field, dobatch_ref, 1e-7,
         "Total BT should be close to the reference values")

#==================stop==========================

} # End of Main
