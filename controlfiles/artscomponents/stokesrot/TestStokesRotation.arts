#DEFINITIONS:  -*-sh-*-
#
# Demonstrates amd tests rotation of the Stokes vector as a function of scan
# angle. The cfile also shows how an atmosphere completly lacking attenuation
# can be generated.
#
# Authors: Patrick Eriksson

Arts2 {


water_p_eq_agendaSet
gas_scattering_agendaSet
PlanetSet(option="Earth")
#


# cosmic background radiation
iy_space_agendaSet

# standard surface agenda (i.e., make use of surface_rtprop_agenda)
iy_surface_agendaSet

# sensor-only path
ppath_agendaSet( option="FollowSensorLosPath" )

# no refraction
ppath_step_agendaSet( option="GeometricPath" )

# (standard) emission calculation
iy_main_agendaSet(option="Emission")

# No jacobian calculation
jacobianOff

# Clearsky = No scattering
cloudboxOff


# A dummy, empty atmosphere
#
abs_speciesSet( species=[] )
AgendaSet( propmat_clearsky_agenda ){
  Ignore( rtp_mag )
  Ignore( rtp_los )
  Ignore( rtp_pressure )
  Ignore( rtp_temperature )
  Ignore( rtp_vmr )
  Ignore( rtp_nlte )
  Ignore(jacobian_quantities)
  Ignore(select_abs_species)
  Touch( nlte_source )
  Touch( dpropmat_clearsky_dx )
  Touch( dnlte_source_dx)
  propmat_clearskyZero
}
#
AtmosphereSet1D
VectorNLogSpace( p_grid, 2, 1013e2, 100e2 )
AtmRawRead( basename = "testdata/tropical" )
AtmFieldsCalc
Extract( z_surface, z_field, 0 )
Extract( t_surface, t_field, 0 )



# Number of Stokes components to be computed
#
IndexSet( stokes_dim, 4 )

# A single frequency
#
VectorSet( f_grid, [ 30e9 ] )

# Set surface to be flat water
#
VectorCreate(data_f_grid)
VectorCreate(data_T_grid)
VectorNLinSpace( data_f_grid, 10, 10e9, 100e9 )
VectorNLinSpace( data_T_grid, 5, 270, 310 )
complex_refr_indexWaterLiebe93( surface_complex_refr_index, 
                                data_f_grid, data_T_grid )
AgendaSet( surface_rtprop_agenda ){
  specular_losCalc
  InterpSurfaceFieldToPosition( out=surface_skin_t, field=t_surface )
  surfaceFlatRefractiveIndex
} 

# Rayleigh-Jeans brightness temperatures
# 
StringSet( iy_unit, "RJBT" )

# Create a small across-track scanning sequence as one mblock
#
# We take nadir as reference for our angles. 
# It is allowed that sensor_los+mblock_grid is > 180, this is automatically 
# mapped to a correct angle. 
#
MatrixSet( sensor_pos, [800e3] )
MatrixSet( sensor_los, [180] )
#
VectorCreate( angles )
VectorNLinSpace( angles, 5, 0, 60 )
IndexCreate( nang )
nelemGet( nang, angles )
#
IndexSet( sensor_norm, 1 )  # Here just a dummy value 
AntennaOff                  # Simplest way to set some dummy variables
#
Matrix1ColFromVector( mblock_dlos_grid, angles )



# Perform basic checks 
atmfields_checkedCalc
atmgeom_checkedCalc
cloudbox_checkedCalc


# Perform RT calculations, with no rotation
# 
sensor_responseInit
sensor_checkedCalc
yCalc
#Print(y)


# Perform RT calculations, with rotation following scan angle
# (rotation angle here set to 50% of angle from nadir!)
Copy( stokes_rotation, angles )
VectorMultiply( stokes_rotation, stokes_rotation, 0.5 )
#
sensor_responseInit
sensor_responseStokesRotation
sensor_checkedCalc
yCalc
#Print(y)


# Check last results
VectorCreate( yref )
VectorSet( yref, [127.654,0,0,0,127.694,3.970,-1.056,0,128.398,15.195,-8.77282,
                  0,132.644,32.479,-32.479,0,154.624,58.901,-102.019,0])
Compare( y, yref, 0.05 )

}
