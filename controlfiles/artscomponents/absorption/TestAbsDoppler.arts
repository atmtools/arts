#DEFINITIONS:  -*-sh-*-
# An example ARTS controlfile that calculates absorption
# coefficients with Doppler shift. 
# 2011-05-13 Stefan Buehler

Arts2 {

LegacyContinuaInit
water_p_eq_agendaSet
gas_scattering_agendaSet
PlanetSet(option="Earth")
#

# Turn on frequency interpolation
# (we could also try higher order interpolation here)
IndexSet( abs_f_interp_order, 1 )

# Number of Stokes components to be computed
#
IndexSet( stokes_dim, 1 )

# Define the list of absorption species:
abs_speciesSet( species=[ "H2O-PWR98",
                          "O2-PWR93",
                          "N2-SelfContStandardType" ] )



# Alternatively select all species that we can find in the scenario:
#abs_speciesDefineAllInScenario( basename="testdata/tropical" )

# This separates the lines into the different tag groups and creates
# the workspace variable `abs_lines_per_species':
abs_lines_per_speciesSetEmpty

propmat_clearsky_agendaAuto

# Dimensionality of the atmosphere
#
AtmosphereSet1D

VectorNLogSpace( p_grid, 10, 100000, 10 )
 
# Atmospheric profiles
AtmRawRead( basename = "testdata/tropical" )

# Now interpolate all the raw atmospheric input onto the pressure 
# grid and create the atmospheric variables `t_field', `z_field', `vmr_field'
AtmFieldsCalc

# Initialize the input variables of propmat_clearsky_fieldCalc from the Atm fields:
AbsInputFromAtmFields

# Create the frequency grid `f_grid':
VectorNLinSpace( f_grid, 500, 50e9, 150e9 )

# Calculate field of absorption coefficients:
propmat_clearsky_agenda_checkedCalc
atmfields_checkedCalc
lbl_checkedCalc

jacobianOff

propmat_clearsky_fieldCalc
Tensor7Create(test_of_propmat_clearsky_field)

# Write out:
#WriteXML( output_file_format, propmat_clearsky_field, "TestAbsDoppler.test1.xml")
ReadXML(test_of_propmat_clearsky_field, "TestAbsDoppler.test1.xml")
CompareRelative(propmat_clearsky_field, test_of_propmat_clearsky_field, 1e-5, "propmat_clearsky_fieldCalc output changed significantly without Doppler!")

# Now with Doppler (still LBL)!

# Create vector of Doppler shift values
VectorCreate(doppler)

# Make ramp with same dimension as p_grid
nelemGet( nelem, p_grid )
VectorNLinSpace( doppler, nelem, 0, 1e9 )

# Calculate field of absorption coefficients:
propmat_clearsky_fieldCalc( doppler=doppler )

# Write out:
#WriteXML( output_file_format, propmat_clearsky_field, "TestAbsDoppler.test2.xml")
ReadXML(test_of_propmat_clearsky_field, "TestAbsDoppler.test2.xml")
CompareRelative(propmat_clearsky_field, test_of_propmat_clearsky_field, 1e-5, "propmat_clearsky_fieldCalc output changed significantly without Doppler!")

# Now with Doppler and lookup table!

# Make the absorption lookupt table frequency grid cover a larger range 
# (we will move outside the original f_grid due to Doppler).
# At the same time, make it also denser for better accuracy.
VectorCreate(f_grid_backup)
Copy(f_grid_backup, f_grid)
VectorNLinSpace( f_grid, 1000, 49e9, 151e9 )

abs_lookupSetup

abs_lookupCalc

# absorption from LUT
propmat_clearsky_agendaAuto(use_abs_lookup=1)

# Restore original frequency grid
Copy(f_grid, f_grid_backup)

# Calculate field of absorption coefficients:
propmat_clearsky_fieldCalc( doppler=doppler )

# Write out:
#WriteXML( output_file_format, propmat_clearsky_field, "TestAbsDoppler.test3.xml")
ReadXML(test_of_propmat_clearsky_field, "TestAbsDoppler.test3.xml")
CompareRelative(propmat_clearsky_field, test_of_propmat_clearsky_field, 1e-5, "propmat_clearsky_fieldCalc output changed significantly!")
}

