#DEFINITIONS:  -*-sh-*-
#
# A demonstration of how to set up a calcuulation involving the Jacobian of a
# surface variable.
#
# SurfaceBlackbody is used for demonstration and the provided Jacobian also
# tested by a perturbation calculation.
#
# 2021-03-31, Patrick Eriksson

Arts2 {


LegacyContinuaInit
water_p_eq_agendaSet
gas_scattering_agendaSet
PlanetSet(option="Earth")
#

# (standard) emission calculation
iy_main_agendaSet(option="Emission")

# cosmic background radiation
iy_space_agendaSet

# sensor-only path
ppath_agendaSet( option="FollowSensorLosPath" )

# no refraction
ppath_step_agendaSet( option="GeometricPath" )

# Frequencies and Stokes
#
IndexSet( stokes_dim, 1 )
VectorLinSpace( f_grid, 10e9, 90e9, 10e9 )

# A pressure grid rougly matching 0 to 30 km
#
VectorNLogSpace( p_grid, 31, 1000e2, 100e2 )

# Definition of species
# 
abs_speciesSet( species= [ "H2O-PWR98", "O2-PWR98", "N2-SelfContStandardType" ] )

# No line data needed here
# 
abs_lines_per_speciesSetEmpty

propmat_clearsky_agendaAuto

# Dimensionality of the atmosphere
#
AtmosphereSet1D

# Atmospheric profiles
# 
AtmRawRead( basename = "testdata/tropical" )
#
AtmFieldsCalc

# Get ground altitude (z_surface) from z_field
Extract( z_surface, z_field, 0 )

# Definition of position and LOS (simulating limb sounding from 600 km)
#
MatrixSet( sensor_pos, [800e3] )
MatrixSet( sensor_los, [135] )

# Define auxiliary data (the order between the quantities is free)
#
ArrayOfStringSet( iy_aux_vars, [] )

# "surface_props"
#
VectorCreate( f_reflectivities )
VectorSet( f_reflectivities, [20e9,60e9,100e9] )
#
VectorCreate( spdata0 )
VectorSet( spdata0, [278,0.25,0.2,0.1]  )
Tensor3FromVector( surface_props_data, spdata0 )
ArrayOfStringSet( surface_props_names, [ "Skin temperature",
                                         "Scalar reflectivity 0",
                                         "Scalar reflectivity 1",
                                         "Scalar reflectivity 2"] )

# Surface agenda
#
AgendaSet( iy_surface_agenda ){
  specular_losCalc
  SurfaceFlatScalarReflectivity(f_reflectivities=f_reflectivities)
  iySurfaceRtpropCalc
}

# Define Jacobian
#
jacobianInit
jacobianAddSurfaceQuantity( g1 = lat_grid, g2 = lon_grid, 
    quantity = "Skin temperature" )
jacobianAddSurfaceQuantity( g1 = lat_grid, g2 = lon_grid, 
    quantity = "Scalar reflectivity 0" )
jacobianAddSurfaceQuantity( g1 = lat_grid, g2 = lon_grid, 
    quantity = "Scalar reflectivity 1" )
jacobianAddSurfaceQuantity( g1 = lat_grid, g2 = lon_grid, 
    quantity = "Scalar reflectivity 2" )
jacobianClose

# No scattering nor sensor
#
cloudboxOff
sensorOff

# Perform RT calculations
#
lbl_checkedCalc
atmfields_checkedCalc
atmgeom_checkedCalc
cloudbox_checkedCalc
sensor_checkedCalc
#
StringSet( iy_unit, "RJBT" )
#
yCalc

# To save calculated spectrum and transmission
#
#output_file_formatSetAscii
#WriteXML( output_file_format, y, "y.xml" )
#WriteXML( output_file_format, jacobian, "j.xml" )

# Copy main output
#
VectorCreate( y0 )
Copy( y0, y )
#
MatrixCreate( j0 )
Copy( j0, jacobian )

# Prepare for perturbation calculations
VectorCreate( spdata )
VectorCreate( dsp )
jacobianOff
VectorCreate( jvec )

# Disturb skin temperature to test that Jacobian
#
VectorSet( dsp, [0.01,0,0,0] )
VectorAddElementwise( spdata, spdata0, dsp )
Tensor3FromVector( surface_props_data, spdata )
#
yCalc
VectorSubtractElementwise( y, y, y0 )
VectorMultiply( y, y, 100 )
VectorExtractFromMatrix( jvec, j0, 0, "column" )
Compare( y, jvec, 1e-6 )

# Disturb reflectivity 0 to test that Jacobian
#
VectorSet( dsp, [0,1e-4,0,0] )
VectorAddElementwise( spdata, spdata0, dsp )
Tensor3FromVector( surface_props_data, spdata )
#
yCalc
VectorSubtractElementwise( y, y, y0 )
VectorMultiply( y, y, 1e4 )
VectorExtractFromMatrix( jvec, j0, 1, "column" )
Compare( y, jvec, 1e-6 )

# Disturb reflectivity 1 to test that Jacobian
#
VectorSet( dsp, [0,0,1e-4,0] )
VectorAddElementwise( spdata, spdata0, dsp )
Tensor3FromVector( surface_props_data, spdata )
#
yCalc
VectorSubtractElementwise( y, y, y0 )
VectorMultiply( y, y, 1e4 )
VectorExtractFromMatrix( jvec, j0, 2, "column" )
Compare( y, jvec, 1e-6 )

# Disturb reflectivity 2 to test that Jacobian
#
VectorSet( dsp, [0,0,0,1e-4] )
VectorAddElementwise( spdata, spdata0, dsp )
Tensor3FromVector( surface_props_data, spdata )
#
yCalc
VectorSubtractElementwise( y, y, y0 )
VectorMultiply( y, y, 1e4 )
VectorExtractFromMatrix( jvec, j0, 3, "column" )
Compare( y, jvec, 1e-6 )

}
 
