import osimport subprocessarts_xml_data_link = "https://arts.mi.uni-hamburg.de/svn/rt/arts-xml-data/trunk/"arts_cat_data_link = "https://arts.mi.uni-hamburg.de/svn/rt/arts-cat-data/trunk/"def link2name(link, *, ignores=['trunk'], default="linkname"):    """Turns a link into a name by splitting its name up        Splits a link-like string and finds a name from it,        a/b/c/trunk    becomes    a, b, c, trunk    by default, the name is "c", as "trunk is ignored        Parameters    ----------    link : str        A link to some webpage        ignores : list of str (default ['trunk'])        List of potential names to ignore        default : str        The default name if none other is found    """    x = link.split('/')        while len(x):        nn = x.pop().strip()        if len(nn) and nn not in ignores:            return nn            return defaultdef get_empty_dir(link, *, name=None):    """Get an empty dir calling subversion        The link is a link to the subversion webpage.  If name is not given calls    link2name        The name is used to generate the basedir for the subversion data folder     structure.  If this data folder exist, the code will not do any extra work            The subversion package must be installed on the system for the subprocess    call to work.  Uses "svn co"        Parameters    ----------    link : str        The link to the subversion package    name : str or None        The name of the folder    Returns    -------    name : str        Either as input or as derived    """    if name == None:        name = link2name(link)        if not os.path.exists(name):        extras = ["--depth", "empty", '--quiet']        subprocess.run(["svn", "co", link, name, *extras],                       check=True, capture_output=True)    return namedef get_file_and_dirs(filepath, *, finding_dir = False):    """Gets the file and the directory structure of the filepath        If finding_dir is true, the file is not downloaded but the folders should    still be generated        Will work recursively even though subversion does not        The subversion package must be installed on the system for the subprocess    call to work.  Uses "svn up"        Parameters    ----------    filepath : str        The path to the file or directory    findig_dir : bool        Whether we are just setting up a directory tree or not    """    if os.path.exists(filepath): return        filepath = os.path.split(filepath.strip())    extras = ["--depth", "empty", '--quiet'] if finding_dir else ['--quiet']        if len(filepath[0].strip()):        get_file_and_dirs(filepath[0], finding_dir=True)        subprocess.run(["svn", "up", os.path.join(*filepath), *extras],                   capture_output=True)def get_file(filepath, *, links=[arts_xml_data_link, arts_cat_data_link]):    """Get the file in from some subversion links        Parameters    ----------    filepath : str        The path to the file or directory    links : list of str        A list of valid subversion links        Throws    ------    OSError if the filepath is not valid upon exit    """    dirs = [get_empty_dir(dir) for dir in links]        path = os.getcwd()    for dir in dirs:        try:            os.chdir(dir)            get_file_and_dirs(filepath)        finally:            os.chdir(path)        found = any([os.path.exists(os.path.join(dir, filepath)) for dir in dirs])    if not found:        raise OSError(f"No {filepath} in svn repositories {links}")def get_test_files(*files, **links):    """Get the files in from default links to arts-cat-data and arts-xml-data        The unnamed arguments should be a list of files        Possible named arguments    ------------------------    cat_data : str or None        Link to the arts-cat-data or None to ignore    xml_data : str or None        Link to the arts-xml-data or None to ignore    extra_data : list of str        List of additional links to use        Throws    ------    OSError if any filepath is invalid, this stops then and there the execution    """        links = list(filter(None, [links.get("cat_data", arts_cat_data_link),                               links.get("xml_data", arts_xml_data_link),                               *links.get("extra_data", [])]))        if len(links):        for file in files:            get_file(file, links=links)